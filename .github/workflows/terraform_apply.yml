name: Terraform ADB GitOps

on:
  pull_request:
    branches: [main]
    paths:
      - 'oe_01/oci/dev/**/adb/adb_resources.json'
  push:
    branches: [main]
    paths:
      - 'oe_01/oci/dev/**/adb/adb_resources.json'

jobs:
  terraform:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Detect Project Info
        id: detect
        run: |
          # Buscar el primer archivo de JSON modificado
          CHANGED_FILE=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep 'oe_01/oci/dev/.*/adb/adb_resources.json' | head -1)
          if [ -z "$CHANGED_FILE" ]; then
            CHANGED_FILE=$(git diff --name-only origin/main ${{ github.sha }} | grep 'oe_01/oci/dev/.*/adb/adb_resources.json' | head -1)
          fi
          echo "CHANGED_FILE=$CHANGED_FILE" >> $GITHUB_ENV
          # Extraer el proyecto del path (asume estructura fija)
          PROJECT=$(echo "$CHANGED_FILE" | awk -F'/' '{print $5}')
          ENVIRONMENT=$(echo "$CHANGED_FILE" | awk -F'/' '{print $4}')
          echo "PROJECT=$PROJECT" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "ADB_JSON=oe_01/oci/$ENVIRONMENT/$PROJECT/adb/adb_resources.json" >> $GITHUB_ENV
          echo "TF_STATE_KEY=oe_01/oci/$ENVIRONMENT/$PROJECT/adb/terraform.tfstate" >> $GITHUB_ENV
          echo "TF_WORKING_DIR=catalog/OPS103_provision_adb" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -upgrade \
            -backend-config="bucket=${{ secrets.OCI_TF_STATE_BUCKET }}" \
            -backend-config="namespace=${{ secrets.OCI_TF_STATE_NAMESPACE }}" \
            -backend-config="region=${{ secrets.OCI_REGION || 'eu-frankfurt-1' }}" \
            -backend-config="key=${{ env.TF_STATE_KEY }}"

      - name: Terraform Validate & Format Check
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform fmt -check -recursive || true
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan -no-color \
            -var="inputs_json_path=${{ github.workspace }}/${{ env.ADB_JSON }}" \
            -out=tfplan > plan.txt || exit 1
        continue-on-error: true

      - name: Update Pull Request with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const planOutput = require('fs').readFileSync('plan.txt', 'utf8');
            const body = `
            ### Terraform Plan ðŸ“–

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${planOutput}
            \`\`\`

            </details>
            _Pushed by @${{ github.actor }}, Event: \`${{ github.event_name }}\`_`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform apply -no-color \
            -auto-approve \
            -var="inputs_json_path=${{ github.workspace }}/${{ env.ADB_JSON }}"
